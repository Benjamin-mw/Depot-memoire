---
title: "cart"
output: html_document
date: "2023-02-03"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Cart

```{r}
install.packages("rpart")
install.packages("rpart.plot")
install.packages("CASdatasets", repos = "http://dutangc.perso.math.cnrs.fr/RRepository/", type="source")
install.packages("CASdatasets", repos = "http://dutangc.free.fr/pub/RRepos/", type="source")
install.packages("CASdatasets", repos = "http://cas.uqam.ca/pub/", type="source")

#library(CASdatasets)
install.packages("rpart")
install.packages("partykit")
library(rpart)
library(partykit)
install.packages("devtools")
devtools::install_github("dutangc/CASdatasets", subdir="pkg")
library(CASdatasets)


install.packages("xts")
install.packages("sp")
install.packages("zoo")
```

```{r}
library(rpart)
library(rpart.plot)
library(sp)
library(CASdatasets)
```

```{r}
data(freMPL5)
#enlever les valeurs négatives
freMPL5 <- subset(freMPL5, freMPL5$ClaimAmount >= 0)
#passer en variables catégorielles
freMPL5$HasKmLimit <- factor(freMPL5$HasKmLimit)
freMPL5$RiskArea <- factor(freMPL5$RiskArea)
freMPL5$ClaimInd <- factor(freMPL5$ClaimInd)
#segmentation des tranches d'âge
freMPL5$DrivAge_fact <- cut(freMPL5$DrivAge, c(20,25,30,35,40,45,50,58,65,120), include.lowest = TRUE)
#Découpage CSP
freMPL5$Categ = 0
freMPL5$Categ[freMPL5$SocioCateg == "CSP50"] = 1
freMPL5$Categ[freMPL5$SocioCateg == "CSP55"] = 2
freMPL5$Categ[freMPL5$SocioCateg == "CSP60"] = 3
freMPL5$Categ[freMPL5$SocioCateg == "CSP1"] = 4
freMPL5$Categ[freMPL5$SocioCateg == "CSP42"] = 5
freMPL5$Categ[freMPL5$SocioCateg == "CSP46"] = 6
freMPL5$Categ[freMPL5$SocioCateg == "CSP48"] = 7
freMPL5$Categ[freMPL5$SocioCateg == "CSP66"] = 8
freMPL5$Categ = factor(freMPL5$Categ)

```

Le coefficient de bonus-malus est réglementaire, ne faut-il pas le rajouter que plus tard dans la tarification ?

Nous allons faire un système à double pénalisation, "BonusMalus" sera pris en compte dans nos GLMs et notre grille de tarification

## Première estimation de la loi de notre variable "ClaimAmount"

```{r, error = TRUE}
cout <- freMPL5[freMPL5$ClaimInd == 1,]
```




```{r}


perm <- sample(nrow(cout),80/100*nrow(cout))
cout.train <- cout[perm,]
cout.test <- cout[-perm,]
```





```{r}
#étape de construction de l'arbre maximal
freMPL5.Tree.Amount <- rpart(ClaimAmount~MariStat+Categ+VehUsage+HasKmLimit+ClaimNbResp+ClaimNbNonResp+ClaimNbParking+ClaimNbFireTheft+ClaimNbWindscreen+OutUseNb+RiskArea+BonusMalus+DrivAge_fact,
                      data=cout.train,
                      control=rpart.control(xval = 20, minbucket = 1,maxdepth = 8,cp=0))
rpart.plot(freMPL5.Tree.Amount)


```
```{r}
#On utilise plotcp pour afficher la courbe du taux d'erreur relatif en fonction des cp, on choisi un cp qui minimise ce taux d'erreur pour une taille correcte
plotcp(freMPL5.Tree.Amount)
printcp(freMPL5.Tree.Amount)
```


```{r}
#étape d'élagage de l'arbre avec un cp qui minimise le taux d'erreur relatif tout en donnant un arbre de taille correcte
freMPL5.Tree.prune.Amount=prune(freMPL5.Tree.Amount,cp=1.0943e-02)
rpart.plot(freMPL5.Tree.prune.Amount)
```

```{r}
pred <- predict(freMPL5.Tree.prune.Amount, newdata = cout.test)
mse <- mean((pred - cout.test$ClaimAmount)^2)
mse

```

---
title: "CartInd"
output: html_document
date: "2023-04-10"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
install.packages("rpart")
install.packages("rpart.plot")
install.packages("CASdatasets", repos = "http://dutangc.perso.math.cnrs.fr/RRepository/", type="source")
install.packages("CASdatasets", repos = "http://dutangc.free.fr/pub/RRepos/", type="source")
install.packages("CASdatasets", repos = "http://cas.uqam.ca/pub/", type="source")

#library(CASdatasets)
install.packages("rpart")
install.packages("partykit")
library(rpart)
library(partykit)
install.packages("devtools")
devtools::install_github("dutangc/CASdatasets", subdir="pkg")
library(CASdatasets)


install.packages("xts")
install.packages("sp")
install.packages("zoo")
```
```{r}
library(rpart)
library(rpart.plot)
library(sp)
library(CASdatasets)
library(ROSE)
```





```{r}
duplicates <- duplicated(freMPL5)
# Suppression des doublons
freMPL5 <- freMPL5[!duplicates,]

```

```{r}
data(freMPL5)
#Création d'une variable de sinistralité
freMPL5$Sinistres = freMPL5$ClaimInd/freMPL5$Exposure
freMPL5$Sinistres2 = round(freMPL5$Sinistres)
#enlever les valeurs négatives
freMPL5 <- subset(freMPL5, freMPL5$ClaimAmount >= 0)
#passer en variables catégorielles
freMPL5$HasKmLimit <- factor(freMPL5$HasKmLimit)
freMPL5$RiskArea <- factor(freMPL5$RiskArea)
freMPL5$ClaimInd <- factor(freMPL5$ClaimInd)
#segmentation des tranches d'âge
freMPL5$DrivAge_fact <- cut(freMPL5$DrivAge, c(20,25,30,35,40,45,50,58,65,120), include.lowest = TRUE)
#Découpage CSP
freMPL5$Categ = 0
freMPL5$Categ[freMPL5$SocioCateg == "CSP50"] = 1
freMPL5$Categ[freMPL5$SocioCateg == "CSP55"] = 2
freMPL5$Categ[freMPL5$SocioCateg == "CSP60"] = 3
freMPL5$Categ[freMPL5$SocioCateg == "CSP1"] = 4
freMPL5$Categ[freMPL5$SocioCateg == "CSP42"] = 5
freMPL5$Categ[freMPL5$SocioCateg == "CSP46"] = 6
freMPL5$Categ[freMPL5$SocioCateg == "CSP48"] = 7
freMPL5$Categ[freMPL5$SocioCateg == "CSP66"] = 8
freMPL5$Categ = factor(freMPL5$Categ)



```

```{r}

set.seed(seed = 2023)
echantillon <- sample(c(TRUE, FALSE), nrow(freMPL5), replace=TRUE, prob=c(0.8,0.2))
freMPL5.train1  <- freMPL5[echantillon, ]
freMPL5.test1   <- freMPL5[!echantillon, ]
```


```{r}
table(freMPL5.train1$ClaimInd)
```

```{r}
freMPL5.Tree.claim <- rpart(ClaimInd ~ MariStat+SocioCateg+VehUsage+HasKmLimit+ClaimNbResp+ClaimNbNonResp+ClaimNbParking+ClaimNbFireTheft+ClaimNbWindscreen+OutUseNb+RiskArea+BonusMalus+DrivAge_fact, data=freMPL5.train1, method="class", control=rpart.control(xval = 20, minbucket =10 ,cp=0))
rpart.plot(freMPL5.Tree.claim)

  
```

```{r}
#On utilise plotcp pour afficher la courbe du taux d'erreur relatif en fonction des cp, on choisi un cp qui minimise ce taux d'erreur pour une taille correcte
plotcp(freMPL5.Tree.claim)
printcp(freMPL5.Tree.claim)
```

```{r}
#étape d'élagage de l'arbre avec un cp qui minimise le taux d'erreur relatif tout en donnant un arbre de taille correcte
freMPL5.Tree.prune.claim=prune(freMPL5.Tree.claim,cp= 0.00072)
rpart.plot(freMPL5.Tree.prune.claim)
```

```{r}
prediction <- predict(freMPL5.Tree.prune.claim, newdata=freMPL5.test1, type="class")

```



```{r}
table(prediction, freMPL5.test1$ClaimInd)
```




```{r}
freMPL5.Tree.sin <- rpart(Sinistres2 ~ MariStat+Categ+VehUsage+HasKmLimit+ClaimNbResp+ClaimNbNonResp+ClaimNbParking+ClaimNbFireTheft+ClaimNbWindscreen+OutUseNb+RiskArea+BonusMalus+DrivAge_fact, data=freMPL5.train1, method="class", control=rpart.control(xval = 10, minbucket = 7, maxdepth= 5, cp=0))
rpart.plot(freMPL5.Tree.sin)

```

```{r}
#On utilise plotcp pour afficher la courbe du taux d'erreur relatif en fonction des cp, on choisi un cp qui minimise ce taux d'erreur pour une taille correcte
plotcp(freMPL5.Tree.sin)
printcp(freMPL5.Tree.sin)
```

```{r}
#étape d'élagage de l'arbre avec un cp qui minimise le taux d'erreur relatif tout en donnant un arbre de taille correcte
freMPL5.Tree.prune.sin=prune(freMPL5.Tree.sin,cp= 0.00044)
rpart.plot(freMPL5.Tree.prune.sin)
```
